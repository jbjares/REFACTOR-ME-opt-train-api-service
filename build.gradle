buildscript {
    ext {
        kotlinVersion = '1.2.70'
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.2.70'

	// Needed so we can resolve the test library from the artifactory
	id "com.jfrog.artifactory" version "4.7.5"
}

apply plugin: "java"
apply plugin: 'maven-publish'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    jcenter()
    mavenCentral()

    maven {
        url "https://artifactory.difuture.de/pht"
    }
}

configurations {
    ktlint
}

group = 'de.difuture.ekut.pht.service'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}


dependencies {
	// The linter
	ktlint "com.github.shyiko:ktlint:0.28.0"
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

	// The canonical docker client implementation
	compile group: 'de.difuture.ekut.pht', name: 'docker-client-implementation', version: '0.0.2'

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

/*
 * Publish as Maven artifact
 */
publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			version '0.0.1-SNAPSHOT'
			pom.withXml {
				asNode().dependencies.'*'.findAll() {
					it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
						dep.name == it.artifactId.text()
					}
				}.each() {
					it.scope*.value = 'compile'
				}
			}
		}
	}
}

model {
	tasks.generatePomFileForMavenPublication {
		destination = file("$buildDir/libs/trainapi-0.0.1-SNAPSHOT.pom")
	}
}


/*
 * The Linter
 */
task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
